package com.qppi.crud.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qppi.crud.bean.Baoxiao;
import com.qppi.crud.bean.Dictionaries;
import com.qppi.crud.bean.Paymentrequest;
import com.qppi.crud.bean.UserInfo;
import com.qppi.crud.bean.YongGong;
import com.qppi.crud.service.DictionariesService;
import com.qppi.crud.service.UserInfoService;
import com.qppi.crud.service.YongGongService;
import com.qppi.crud.utils.Msg;
import com.qppi.crud.utils.MySelfUtil;
import com.qppi.crud.utils.MyTools;
import com.sun.xml.internal.messaging.saaj.packaging.mime.internet.BMMimeMultipart;

import net.sf.json.JSONArray;

@Controller
@RequestMapping("yonggong")
public class YongGongController extends BaseController{
	
	@Autowired
	private YongGongService yonggongService;
	@Autowired
	private DictionariesService dictionariesService;
	@Autowired
	private UserInfoService userInfoService;
	
	/**
	 * 用工列表
	 * @param yongGong
	 * @return
	 */
	@RequestMapping("listYongGong")
	@ResponseBody
	public Msg listYongGong(YongGong yongGong,int page,HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setCreateBy(username);
		List<YongGong> yglist = yonggongService.listYonggong(yongGong,page);
		
		List<YongGong> list = new ArrayList<YongGong>();
		String companyId = yongGong.getYl10();
		String bz = "";
		
		yongGong.setYl1("待部门审批");
		UserInfo user = userInfoService.selectUserId(username);
		String bumen = user.getYl3();
		if(bumen != null && !"".equals(bumen)){
			yongGong.setZpBumen(bumen);
		}
		List<Dictionaries> dicList = dictionariesService.selectBumenById(companyId);
		if(dicList.size()>0){
			for (Dictionaries dic : dicList) {
				if(dic.getName().equals(bumen)){
					bz = dic.getBz();
				}
			}
		}
		if(bz.contains(username)){
			List<YongGong> ygList = yonggongService.selectByStatus(yongGong);
			list.addAll(ygList);
		}
		
		List<YongGong> sList = getStatus(username, companyId);
		list.addAll(sList);
		
		return Msg.success().add("result", yglist).add("size", list.size());
	}
	
	/**
	 * 添加用工信息
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("addYongGong")
	@ResponseBody
	public Msg addYongGong(YongGong yongGong,HttpServletRequest request){
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		
		String username = getCurrentSysUser(request).getUsername();
		String time = MyTools.getTime();
		String id = MyTools.getDateR();
		
		yongGong.setYonggongId(id);
		yongGong.setCreateTime(time);
		yongGong.setCreateBy(username);
		
		String zpBumen = yongGong.getZpBumen();
		String companyId = yongGong.getYl10();
		String bz = "";
		String contants = "有用工需要审批";
		
		List<Dictionaries> list = dictionariesService.selectBumenById(companyId);
		if(list.size()>0){
			for (Dictionaries dic : list) {
				if(dic.getName().equals(zpBumen)){
					bz = dic.getBz();
				}
			}
		}
		
		if(bz == null || "".equals(bz)){
			yongGong.setYl1("待行政审批");
			List<String> role = getRole(companyId,"11");
			for (String string : role) {
				UserInfo userInfo = new UserInfo();
				userInfo.setRoletype(string);
				List<UserInfo> selectUser = userInfoService.selectUser(userInfo);
				for (UserInfo uInfo : selectUser) {
					String uName = uInfo.getUsername();
					sendYuanGong(uName, contants);
				}
			}
		}else{
			yongGong.setYl1("待部门审批");
			bz = bz.replace("，", ",");
			if(bz.contains(",")){
				String[] split = bz.split(",");
				for(int i=0; i<split.length; i++){
					sendYuanGong(split[i], contants);
				}
			}else {
				sendYuanGong(bz, contants);
			}
		}
		
		if(!yonggongService.addYonggong(yongGong)){
			String responsecontent = JSONArray.fromObject(yongGong).toString();
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "添加失败");
		}
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "添加成功");
	}
	
	/**
	 * 获取到具体的用工详情
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("getYongGong")
	@ResponseBody
	public Msg getYongGong(YongGong yongGong,HttpServletRequest request){
		if(yongGong.getYonggongId() == null || "".equals(yongGong.getYonggongId())){
			return Msg.fail().add("result", "ID不能为空");
		}else{
			YongGong yonggong = yonggongService.getYonggong(yongGong);
			return Msg.success().add("result", yonggong);
		}
	}
	
	/**
	 * 获取公司部门
	 * @param yongGong
	 * @return
	 */
	@RequestMapping("getBuMen")
	@ResponseBody
	public Msg getBuMen(YongGong yongGong){
		String companyId = yongGong.getYl10();
		List<Dictionaries> list = dictionariesService.selectBumenById(companyId);
		return Msg.success().add("result", list);
	}
	
	/**
	 * 用工待处理
	 * @param yongGong
	 * @return
	 */
	@RequestMapping("pendYongGong")
	@ResponseBody
	public Msg pendYongGong(YongGong yongGong, HttpServletRequest request){
		List<YongGong> list = new ArrayList<YongGong>();
		String username = getCurrentSysUser(request).getUsername();
		String companyId = yongGong.getYl10();
		String bz = "";
		
		yongGong.setYl1("待部门审批");
		UserInfo user = userInfoService.selectUserId(username);
		String bumen = user.getYl3();
		if(bumen == null || "".equals(bumen)){
			return Msg.fail().add("result", "当前用户没有部门");
		}
		yongGong.setZpBumen(bumen);
		List<Dictionaries> dicList = dictionariesService.selectBumenById(companyId);
		if(dicList.size()>0){
			for (Dictionaries dic : dicList) {
				if(dic.getName().equals(bumen)){
					bz = dic.getBz();
				}
			}
		}
		if(bz.contains(username)){
			List<YongGong> ygList = yonggongService.selectByStatus(yongGong);
			list.addAll(ygList);
		}
		
		List<YongGong> sList = getStatus(username, companyId);
		list.addAll(sList);
		Collections.sort(list, new Comparator<YongGong>(){
            public int compare(YongGong o1, YongGong o2) {
            	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            	int mark = 1;
          	   	try {
	          		Date date0 = sdf.parse(o1.getCreateTime());
	          		Date date1 = sdf.parse(o2.getCreateTime());
	          		if(date0.getTime() > date1.getTime()){
	          		    mark =  -1;
	          		}
	          		if(o1.getCreateTime().equals(o2.getCreateTime())){
	          		    mark =  0;
	          		}
          	   } catch (Exception e) {
          		   e.printStackTrace();
          	   }
          	   return mark;
            }
        }); 
		
		return Msg.success().add("result", list).add("size", list.size());
	}
	
	/**
	 * 部门审批同意
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("bmShenpi")
	@ResponseBody
	public Msg bmShenpi(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("待行政审批");
		yongGong.setSpBumen(username);
		yongGong.setSpBmtime(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		
		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		//行政操作推送
		List<String> list = getRoleType(yongGong.getYl10(),"11");
		String contant = "有行政需要处理";
		if(list.size()>0){
			for (String roleType : list) {
				UserInfo user = new UserInfo();
				user.setRoletype(roleType);
				List<UserInfo> userList = userInfoService.selectUser(user);
				for (UserInfo userInfo : userList) {
					sendYuanGong(userInfo.getUsername(), contant);
				}
			}
		}
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}
	
	/**
	 * 部门审批拒绝
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("nobmShenpi")
	@ResponseBody
	public Msg nobmShenpi(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("部门审批已拒绝");
		yongGong.setSpBumen(username);
		yongGong.setSpBmtime(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		
		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		YongGong yg = yonggongService.getYonggong(yongGong);
		String createBy = yg.getCreateBy();
		String contant = "用工审批被拒绝";
		sendYuanGong(createBy, contant);
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}

	/**
	 * 行政审批同意
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("xzShenpi")
	@ResponseBody
	public Msg xzShenpi(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("待经理审批");
		yongGong.setSpRenshi(username);
		yongGong.setSpRstime(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		
		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		String bianma = "yonggongsp";
		String companyId = yongGong.getYl10();
		String contant = "有备用金申请需要审批";
		List<String> quanxian = getQuanxian(bianma, companyId);
		for (String string : quanxian) {
			sendYuanGong(string,contant);
		}
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}
	
	/**
	 * 行政审批拒绝
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("noxzShenpi")
	@ResponseBody
	public Msg noxzShenpi(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("行政审批已拒绝");
		yongGong.setSpRenshi(username);
		yongGong.setSpRstime(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		

		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		YongGong yg = yonggongService.getYonggong(yongGong);
		String createBy = yg.getCreateBy();
		String contant = "用工审批被拒绝";
		sendYuanGong(createBy, contant);
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}
	
	/**
	 * 经理审批同意
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("jlShenpi")
	@ResponseBody
	public Msg jlShenpi(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("待行政完成");
		yongGong.setSpJingli(username);
		yongGong.setSpJltime(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		
		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		//行政操作推送
		List<String> list = getRoleType(yongGong.getYl10(),"11");
		String contant = "有行政需要处理";
		if(list.size()>0){
			for (String roleType : list) {
				UserInfo user = new UserInfo();
				user.setRoletype(roleType);
				List<UserInfo> userList = userInfoService.selectUser(user);
				for (UserInfo userInfo : userList) {
					sendYuanGong(userInfo.getUsername(), contant);
				}
			}
		}
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}
	
	/**
	 * 经理审批拒绝
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("nojlShenpi")
	@ResponseBody
	public Msg nojlShenpi(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("经理审批已拒绝");
		yongGong.setSpJingli(username);
		yongGong.setSpJltime(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		

		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		YongGong yg = yonggongService.getYonggong(yongGong);
		String createBy = yg.getCreateBy();
		String contant = "用工审批被拒绝";
		sendYuanGong(createBy, contant);
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}
	
	/**
	 * 操作完成
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("xzWancheng")
	@ResponseBody
	public Msg xzWancheng(YongGong yongGong, HttpServletRequest request){
		String username = getCurrentSysUser(request).getUsername();
		yongGong.setYl1("行政需求完成");
		yongGong.setYl3(MyTools.getTime());
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String responsecontent = JSONArray.fromObject(yongGong).toString();
		
		if(!yonggongService.update(yongGong)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "更新失败");
		}
		
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "更新成功");
	}
	
	/**
	 * 经理审批列表
	 * @param yongGong
	 * @param request
	 * @return
	 */
	@RequestMapping("shenpiList")
	@ResponseBody
	public Msg shenpiList(YongGong yongGong, HttpServletRequest request,int page){
		List<YongGong> list = yonggongService.listYonggong(yongGong, page);
		return Msg.success().add("result", list);
	}
	
	
	//发送消息到员工微信
	public void sendYuanGong(String username,String contant){
		String baseUrl = dictionariesService.selectWxURL();
		if(username != null){
			UserInfo userInfo = userInfoService.selectUserId(username);
			String wxid = userInfo.getYl7();
			if(wxid != null){
				String url = baseUrl+"/wx/sendFuhe?openid="+wxid+"&contant="+contant;
				String doHttpGet = MySelfUtil.doHttpGet(url);
				System.out.println(doHttpGet);
				System.err.println("发送完成");
			}
		}
	}
	
	//根据公司id 找到app端权限对应的角色
	public List<String> getRole(String companyId,String roleEn){
		List<String> roleList = new ArrayList<String>();
		List<Dictionaries> role = dictionariesService.getRoleByCompanyId(companyId);
		if(role == null){
			return null;
		}
		for (Dictionaries dic : role) {
			String nameEn = dic.getNameEn();
			nameEn = nameEn.replace("，", ",");
			if(nameEn.contains(",")){
				String[] split = nameEn.split(",");
				for(int i=0; i<split.length; i++){
					if(split[i].equals(roleEn)){
						String name = dic.getName();
						roleList.add(name);
					}
				}
			}else {
				if(nameEn.equals(roleEn)){
					String name = dic.getName();
					roleList.add(name);
				}
			}
		}
		return roleList;
	}
	
	//根据用户名获取需要其处理状态获取到对应数据
	public List<YongGong> getStatus(String username,String yl10){
		List<YongGong> ygList = new ArrayList<YongGong>();
		UserInfo user = userInfoService.selectUserId(username);
		String roletype = user.getRoletype();
		String quanxian = dictionariesService.selectQuanXian(roletype);
		//获取角色具有的权限
		List<String> qxList = new ArrayList<String>();
		quanxian = quanxian.replace("，", ",");
		if(quanxian.contains(",")){
			String[] split = quanxian.split(",");
			for(int i=0; i<split.length; i++){
				qxList.add(split[i]);
			}
		}else{
			qxList.add(quanxian);
		}
		
		//对应订单状态
		List<String> ddList = new ArrayList<String>();
		List<Dictionaries> dicList = dictionariesService.selectAllRoot();
		for (String qx : qxList) {
			for (Dictionaries dic : dicList) {
				if(dic.getNameEn().equals(qx)){
					String bz = dic.getBz();
					if(bz.contains("-----")){
						String[] split = bz.split("-----");
						String status = split[1];
						status = status.replace("，", ",");
						if(status.contains(",")){
							String[] s = status.split(",");
							for(int i=0; i<s.length; i++){
								ddList.add(s[i]);
							}
						}else{
							ddList.add(status);
						}
					}
					break;
				}
			}
		}
		List<String> dd = MySelfUtil.removeDuplicate(ddList);
		for (String status : dd) {
			YongGong yg = new YongGong();
			yg.setYl1(status);
			yg.setYl10(yl10);
			List<YongGong> list = yonggongService.selectByStatus(yg);
			ygList.addAll(list);
		}
		return ygList;
	}
	
	//获取对应权限的角色(根据权限对应的数字)
	public List<String> getRoleType(String companyId, String roleEn){
		List<String> roleList = new ArrayList<String>();
		UserInfo userInfo = new UserInfo();
		userInfo.setYl1(companyId);
		List<UserInfo> userList = userInfoService.selectUserInfo(userInfo);
		for (UserInfo user : userList) {
			String roletype = user.getRoletype();
			String nameEn = dictionariesService.selectQuanXian(roletype);
			if(nameEn != null){
				nameEn = nameEn.replace("，", ",");
				if(nameEn.contains(",")){
					String[] split = nameEn.split(",");
					for(int i=0; i<split.length; i++){
						if(roleEn.equals(split[i])){
							roleList.add(roletype);
						}
					}
				}else{
					if(roleEn.equals(nameEn)){
						roleList.add(roletype);
					}
				}
			}
			
		}
		List<String> removeDuplicate = MySelfUtil.removeDuplicate(roleList);
		return removeDuplicate;
	}
	
	//获取拥有审核权限的人
	public List<String> getQuanxian(String bianma, String companyId){
		List<String> list = new ArrayList<String>();
		Dictionaries d = dictionariesService.selectByBianma(bianma);
		String uString = "";
		if(d != null){
			List<Dictionaries> dSon = dictionariesService.selectSon(d.getDictionariesId());
			if(dSon.size()>0){
				for (Dictionaries dic : dSon) {
					if(dic.getNameEn().equals(companyId)){
						uString = dic.getBz();
						break;
					}
				}
			}
		}
		uString = uString.replace("，", ",");
		if(uString.contains(",")){
			String[] split = uString.split(",");
			for(int i = 0; i < split.length; i++){
				list.add(split[i]);
			}
			return list;
		}else{
			list.add(uString);
			return list;
		}
	}
}
