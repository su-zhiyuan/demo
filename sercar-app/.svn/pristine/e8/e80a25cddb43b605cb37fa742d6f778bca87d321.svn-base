package com.qppi.crud.controller;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qppi.crud.bean.Baoxiao;
import com.qppi.crud.bean.Dictionaries;
import com.qppi.crud.bean.InfoRelay;
import com.qppi.crud.bean.Paymentrequest;
import com.qppi.crud.bean.Photo;
import com.qppi.crud.bean.UserInfo;
import com.qppi.crud.service.DictionariesService;
import com.qppi.crud.service.PaymentrequestService;
import com.qppi.crud.service.UserInfoService;
import com.qppi.crud.utils.GetRandem;
import com.qppi.crud.utils.Msg;
import com.qppi.crud.utils.MySelfUtil;
import com.qppi.crud.utils.MyTools;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
@Controller
@RequestMapping("paymentrequest")
public class PaymentrequestController extends BaseController {
	@Autowired
	private PaymentrequestService paymentrequestService;
	@Autowired
	private DictionariesService dictionariesService;
	@Autowired
	private UserInfoService userInfoService;


	
	/**
	 * 获取列表
	 * @param paymentrequest
	 * @return
	 */
	@RequestMapping("list")
	@ResponseBody
	public Msg listPaymentrequest(Paymentrequest paymentrequest, int page) {
		List<Paymentrequest> list = paymentrequestService.list(paymentrequest,page);
		return Msg.success().add("result", list);
	}
	
	/**
	 * 获取个人付款
	 * @param paymentrequest
	 * @return
	 */
	@RequestMapping("select")
	@ResponseBody
	public Msg select(HttpServletRequest request, int page, Paymentrequest paymentrequest) {
		String username = getCurrentSysUser(request).getUsername();
		String yl10 = paymentrequest.getYl10();
		List<Paymentrequest> list = getStatus(username, yl10);
		paymentrequest.setYl3(username);
		return Msg.success().add("result", paymentrequestService.select(paymentrequest,page)).add("size", list.size());
	}
	
	/**
	 * 报销的待处理
	 * @param paymentrequest
	 * @param request
	 * @return
	 */
	@RequestMapping("pendPaymentrequest")
	@ResponseBody
	public Msg pendPaymentrequest(Paymentrequest paymentrequest, HttpServletRequest request) {
		String username = getCurrentSysUser(request).getUsername();
		List<Paymentrequest> list = getStatus(username,paymentrequest.getYl10());
		if(list.size()>0){
			Collections.sort(list, new Comparator<Paymentrequest>(){
	            public int compare(Paymentrequest o1, Paymentrequest o2) {
	            	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	            	int mark = 1;
	          	   	try {
		          		Date date0 = sdf.parse(o1.getYl4());
		          		Date date1 = sdf.parse(o2.getYl4());
		          		if(date0.getTime() > date1.getTime()){
		          		    mark =  -1;
		          		}
		          		if(o1.getYl4().equals(o2.getYl4())){
		          		    mark =  0;
		          		}
	          	   } catch (Exception e) {
	          		   e.printStackTrace();
	          	   }
	          	   return mark;
	            }
	        }); 
		}
		return Msg.success().add("result", list).add("size", list.size());
		
	}
	
	/**
	 * 财务确认
	 * @param request
	 * @param paymentrequest
	 * @param req
	 * @return
	 */
	@RequestMapping("affirmPaymentrequest")
	@ResponseBody
	public Msg affirmPaymentrequest(@RequestBody Paymentrequest paymentrequest, HttpServletRequest request) {

 		List<Photo> photos = paymentrequest.getPhotos();
		String basePath = dictionariesService.selectPATH();
		String id = paymentrequest.getPaymentrequestId();
		StringBuilder str = new StringBuilder();
		
		for (Photo photo : photos) {
			String r = MyTools.getDateR();
			String url = basePath + "/" + id + "/" + r;
			String tupian = photo.getTupian();
			System.out.println(url);
			if (tupian.indexOf("data:image/") != -1) {
			        int firstIndex = tupian.indexOf("data:image/") + 11;
			        int index1 = tupian.indexOf(";base64,");
			        String type = tupian.substring(firstIndex, index1);
			        url = url + "." + type;
			        try {
			        	tupian = tupian.substring(tupian.indexOf(",")+1);
						if(!MySelfUtil.GenerateImage(tupian,url)){
							return Msg.fail().add("result", "图片上传失败");
						}
						str.append(r +"."+type).append("+");
					} catch (Exception e) {
						e.printStackTrace();
						return Msg.fail().add("result", "图片上传失败");
					}
			}
		}
		
		paymentrequest.setYl9(str.toString());
		paymentrequest.setYl1("财务确认待申请人确认");
		String username = paymentrequestService.get(paymentrequest).getYl3();
		String contant = "付款申请已发送待确认";
		sendYuanGong(username, contant);
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String responsecontent = JSONArray.fromObject(paymentrequest).toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		
		if(!paymentrequestService.update(paymentrequest)){
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "失败");
		}
		status = "failure";
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.success().add("result", "成功");
	}
	
	/**
	 * 获取对象
	 * @param paymentrequest
	 * @return
	 */
	@RequestMapping("get")
	@ResponseBody
	public Msg getPaymentrequest(Paymentrequest paymentrequest){
		String URL = dictionariesService.selectURL();
		if(paymentrequest.getPaymentrequestId() == null || paymentrequest.getPaymentrequestId().equals("") ){
			return Msg.success().add("result", "paymentrequestId不能为空");
		}else{		
			Paymentrequest pay = paymentrequestService.get(paymentrequest);
			List<String> cwpath = new ArrayList<String>();
			String yl9 = pay.getYl9();
			if(yl9 != null && !"".equals(yl9)){
				String id = paymentrequest.getPaymentrequestId();
				String[] split = yl9.split("\\+");
				for (String photo : split) {
					photo = URL+ "/" + id + "/" + photo;
					cwpath.add(photo);
				}
				pay.setCwphotos(cwpath);
			}
			
			List<String> sqpath = new ArrayList<String>();
			String yl5 = pay.getYl5();
			if(yl5 != null && !"".equals(yl5)){
				String id = paymentrequest.getPaymentrequestId();
				String[] split = yl5.split("\\+");
				for (String photo : split) {
					photo = URL+ "/" + id + "/" + photo;
					sqpath.add(photo);
				}
				pay.setSqphotos(sqpath);
			}
			
			String total = pay.getTotal();
			Map<String, String> map = MySelfUtil.number2CNMontrayUnit(total);
			pay.setMoneyMap(map);
		
			return Msg.success().add("result", pay);
		}
	}
	
	/**
	 * 增加对象
	 * @param paymentrequest
	 * @return
	 */
	@RequestMapping("add")
	@ResponseBody
	public Msg addPaymentrequest(@RequestBody Paymentrequest paymentrequest, HttpServletRequest request,HttpServletResponse response) {
		String id = GetRandem.getDateR();

		paymentrequest.setPaymentrequestId(id);
		paymentrequest.setYl1("待审批");
		paymentrequest.setYl4(MyTools.getTime());
		
		try {
			double m = Double.parseDouble(paymentrequest.getTotal());
			DecimalFormat df = new DecimalFormat("0.00"); 
			String money = df.format(m);
			paymentrequest.setTotal(money);
		} catch (Exception e) {
			e.printStackTrace();
			return Msg.fail().add("result", "所填不是价格不是数字");
		}
		
		List<Photo> photos = paymentrequest.getPhotos();
		String basePath = dictionariesService.selectPATH();
		StringBuilder str = new StringBuilder();
		
		for (Photo photo : photos) {
			String r = MyTools.getDateR();
			String url = basePath + "/" + id + "/" + r;
			String tupian = photo.getTupian();
			System.out.println(url);
			if (tupian.indexOf("data:image/") != -1) {
			        url = url + ".jpg";
			        try {
			        	tupian = tupian.substring(tupian.indexOf(",")+1);
						if(!MySelfUtil.GenerateImage(tupian,url)){
							return Msg.fail().add("result", "图片上传失败");
						}
						str.append(r +".jpg").append("+");
					} catch (Exception e) {
						e.printStackTrace();
						return Msg.fail().add("result", "图片上传失败");
					}
			}
		}
		
		paymentrequest.setYl5(str.toString());
		
		
		String bianma = "fukuansp";
		String companyId = paymentrequest.getYl10();
		String contant = "有付款申请需要审批";
		List<String> quanxian = getQuanxian(bianma, companyId);
		for (String string : quanxian) {
			sendYuanGong(string,contant);
		}
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String responsecontent = JSONArray.fromObject(paymentrequest).toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String username = getCurrentSysUser(request).getUsername();
		
		if(paymentrequestService.add(paymentrequest)){
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.success().add("result", "success");
		}
		status = "failure";
		MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
		return Msg.fail().add("result", "fail");
	}

	/**
	 * 更新对象
	 * @param paymentrequest
	 * @return
	 */
	@RequestMapping("update")
	@ResponseBody
	public Msg updatePaymentrequest(Paymentrequest paymentrequest,HttpServletRequest request){
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String responsecontent = JSONArray.fromObject(paymentrequest).toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String username = getCurrentSysUser(request).getUsername();
		
		String quanxian = "fukuansp";
		Dictionaries d = dictionariesService.selectByBianma(quanxian);
		String companyId = paymentrequest.getYl10();
		String uString = "";
		if(d != null){
			List<Dictionaries> dSon = dictionariesService.selectSon(d.getDictionariesId());
			if(dSon.size()>0){
				for (Dictionaries dic : dSon) {
					if(dic.getNameEn().equals(companyId)){
						uString = dic.getBz();
						break;
					}
				}
			}
		}
		uString = uString.replace("，", ",");
		if(uString.contains(",")){
			String[] uArry = uString.split(",");
			List<String> urList = new ArrayList<String>();
			for (String string : uArry) {
				urList.add(string);
			}
			
			if(paymentrequest.getPaymentrequestId() == null || paymentrequest.getPaymentrequestId().equals("") ){
				return Msg.success().add("result", "evectionId不能为空");
			}else{
				Paymentrequest eve = paymentrequestService.get(paymentrequest);
				if(paymentrequest.getYl1().equals("已拒绝")){
					paymentrequest.setYl16(username);
					
					String cUsername = paymentrequestService.get(paymentrequest).getYl3();
					String contant = "付款申请已拒绝";
					sendYuanGong(cUsername, contant);
					
					if(!paymentrequestService.update(paymentrequest)){
						status = "failure";
						MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
						return Msg.fail().add("result", "更新失败");
					}
					MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
					return Msg.success().add("result", "更新成功");
				}else{
					
					String details = "";
					String oldBz = eve.getYl2();
					String newBz = paymentrequest.getYl2();
					if(newBz != null && !"".equals(newBz)){
						if (oldBz != null && !"".equals(oldBz)) {
							details = oldBz+ "," + paymentrequest.getYl15() + "--" + newBz ;
						}else{
							details = paymentrequest.getYl15() + "--" + newBz;
						}
					}else{
						details = oldBz;
					}
					paymentrequest.setYl2(details);
					
					if(eve != null){
						String user = eve.getYl16();
						if(user != null && !"".equals(user)){
							user = eve.getYl16()+","+username;
						}else{
							user = username;
						}
						paymentrequest.setYl16(user);
					}
					String yl16 = paymentrequest.getYl16();
					if(yl16.contains(",")){
						String[] aArr = yl16.split(",");
						List<String> arList = new ArrayList<String>();
						for (String string : aArr) {
							arList.add(string);
						}
						List<String> list = MySelfUtil.removeDuplicate(arList);
						
						String yl15 = "";
						String userName = "";
						for (String string : list) {
							UserInfo user = userInfoService.selectUserId(string);
							String n = user.getName();
							if(yl15.equals("")){
								yl15 = n;
							}else{
								yl15 = yl15 + "," + n;
							}
							if(userName.equals("")){
								userName = string;
							}else{
								userName = userName + "," + string;
							}
							
						}
						paymentrequest.setYl15(yl15);
						paymentrequest.setYl16(userName);
						
						System.out.println(MySelfUtil.bijiao(urList,list));
						if(MySelfUtil.bijiao(urList,list)){
							paymentrequest.setYl1("已审批待财务确认");
							if(!paymentrequestService.update(paymentrequest)){
								status = "failure";
								MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
								return Msg.fail().add("result", "更新失败");
							}
							
							String cUsername = paymentrequestService.get(paymentrequest).getYl3();
							String contant = "付款申请已审批";
							sendYuanGong(cUsername, contant);
							
							String yl10 = paymentrequest.getYl10();
							String contants = "付款申请需要确认";
							List<String> role = getRole(yl10,"4");
							for (String string : role) {
								UserInfo userInfo = new UserInfo();
								userInfo.setRoletype(string);
								List<UserInfo> selectUser = userInfoService.selectUser(userInfo);
								for (UserInfo uInfo : selectUser) {
									String uName = uInfo.getUsername();
									sendYuanGong(uName, contants);
								}
							}
							
							MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
							return Msg.success().add("result", "更新成功");
						}else {
							paymentrequest.setYl1("待审批");
							if(!paymentrequestService.update(paymentrequest)){
								status = "failure";
								MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
								return Msg.fail().add("result", "更新失败");
							}
							MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
							return Msg.success().add("result", "更新成功");
						}
					}else {
						paymentrequest.setYl1("待审批");
						if(!paymentrequestService.update(paymentrequest)){
							status = "failure";
							MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
							return Msg.fail().add("result", "更新失败");
						}
						MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
						return Msg.success().add("result", "更新成功");
					}
					
				}
			}
		}else{
			if(!paymentrequestService.update(paymentrequest)){
				status = "failure";
				MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
				return Msg.fail().add("result", "更新失败");
			}
			
			String cUsername = paymentrequestService.get(paymentrequest).getYl3();
			String contant = "付款申请已审批";
			sendYuanGong(cUsername, contant);
			
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.success().add("result", "更新成功");
		}
	}
	
	/**
	 * 删除对象
	 * @param paymentrequest
	 * @return
	 */
	@RequestMapping("delPaymentrequest")
	@ResponseBody
	public Msg delPaymentrequest(Paymentrequest paymentrequest, HttpServletRequest request){
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String responsecontent = JSONArray.fromObject(paymentrequest).toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String username = getCurrentSysUser(request).getUsername();
		
		if(paymentrequest.getPaymentrequestId() == null || paymentrequest.getPaymentrequestId().equals("") ){
			return Msg.success().add("result", "paymentrequestId不能为空");
		}else{
			if(paymentrequestService.delete(paymentrequest)){
				status = "failure";
				MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
				return Msg.success().add("result", "success");
			}
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "fail");
		}
	}
	
	/**
	 * 申请人确认
	 * @param baoxiao
	 * @return
	 */
	@RequestMapping("querenPaymentrequest")
	@ResponseBody
	public Msg querenPaymentrequest(Paymentrequest paymentrequest,HttpServletRequest request){
		
		String Xiangmuming = request.getContextPath();
		String requestcontent = request.getRequestURL().toString();
		String responsecontent = JSONArray.fromObject(paymentrequest).toString();
		String type = request.getMethod();
		String url = dictionariesService.selectRiZhiURL();
		String status = "success";
		String username = getCurrentSysUser(request).getUsername();
		
		if(paymentrequest.getPaymentrequestId() == null || paymentrequest.getPaymentrequestId().equals("") ){
			return Msg.success().add("result", "paymentrequestId不能为空");
		}else{
			paymentrequest.setYl1("申请人已确认");
			if(paymentrequestService.update(paymentrequest)){
				MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
				return Msg.success().add("result", "success");
			}
			status = "failure";
			MySelfUtil.addRiZhi(username, Xiangmuming, requestcontent, responsecontent, status, type, url);
			return Msg.fail().add("result", "fail");
		}
	}
	
	//获取拥有审核权限的人
	public List<String> getQuanxian(String bianma, String companyId){
		List<String> list = new ArrayList<String>();
		Dictionaries d = dictionariesService.selectByBianma(bianma);
		String uString = "";
		if(d != null){
			List<Dictionaries> dSon = dictionariesService.selectSon(d.getDictionariesId());
			if(dSon.size()>0){
				for (Dictionaries dic : dSon) {
					if(dic.getNameEn().equals(companyId)){
						uString = dic.getBz();
						break;
					}
				}
			}
		}
		if(uString.contains(",")){
			String[] split = uString.split(",");
			for(int i = 0; i < split.length; i++){
				list.add(split[i]);
			}
			return list;
		}else{
			list.add(uString);
			return list;
		}
	}
	
	//发送消息到员工微信
	public void sendYuanGong(String username,String contant){
		String baseUrl = dictionariesService.selectWxURL();
		if(username != null){
			UserInfo userInfo = userInfoService.selectUserId(username);
			String wxid = userInfo.getYl7();
			if("开".equals(userInfo.getYl8()) && wxid != null){
				String url = baseUrl+"/wx/sendFuhe?openid="+wxid+"&contant="+contant;
				String doHttpGet = MySelfUtil.doHttpGet(url);
				System.out.println(doHttpGet);
				System.err.println("发送完成");
			}
		}
	}
	
	//根据用户名获取需要其处理状态获取到对应数据
	public List<Paymentrequest> getStatus(String username,String yl10){
		int page = 0;
		List<Paymentrequest> ptList = new ArrayList<Paymentrequest>();
		UserInfo user = userInfoService.selectUserId(username);
		String roletype = user.getRoletype();
		String quanxian = dictionariesService.selectQuanXian(roletype);
		//获取角色具有的权限
		List<String> qxList = new ArrayList<String>();
		quanxian = quanxian.replace("，", ",");
		if(quanxian.contains(",")){
			String[] split = quanxian.split(",");
			for(int i=0; i<split.length; i++){
				qxList.add(split[i]);
			}
		}else{
			qxList.add(quanxian);
		}
		
		//对应订单状态
		List<String> ddList = new ArrayList<String>();
		List<Dictionaries> dicList = dictionariesService.selectAllRoot();
		for (String qx : qxList) {
			for (Dictionaries dic : dicList) {
				if(dic.getNameEn().equals(qx)){
					String bz = dic.getBz();
					if(bz.contains("-----")){
						String[] split = bz.split("-----");
						String status = split[1];
						status = status.replace("，", ",");
						if(status.contains(",")){
							String[] s = status.split(",");
							for(int i=0; i<s.length; i++){
								ddList.add(s[i]);
							}
						}else{
							ddList.add(status);
						}
					}
					break;
				}
			}
		}
		List<String> dd = MySelfUtil.removeDuplicate(ddList);
		for (String status : dd) {
			Paymentrequest pt = new Paymentrequest();
			pt.setYl1(status);
			pt.setYl10(yl10);
			if(!quanxian.contains("4")){
				pt.setYl3(username);
			}
			
			if(!quanxian.contains("4")){
				pt.setYl3(username);
				List<Paymentrequest> list = paymentrequestService.select(pt, page);
				ptList.addAll(list);
			}else{
				if("财务确认待申请人确认".equals(status)){
					pt.setYl3(username);
					List<Paymentrequest> list = paymentrequestService.select(pt, page);
					ptList.addAll(list);
				}else {
					List<Paymentrequest> list = paymentrequestService.select(pt, page);
					ptList.addAll(list);
				}
			}
			
		}
		return ptList;
	}
	

	//根据公司id 找到app端权限对应的角色
	public List<String> getRole(String companyId,String roleEn){
		List<String> roleList = new ArrayList<String>();
		List<Dictionaries> role = dictionariesService.getRoleByCompanyId(companyId);
		if(role == null){
			return null;
		}
		for (Dictionaries dic : role) {
			String nameEn = dic.getNameEn();
			nameEn = nameEn.replace("，", ",");
			if(nameEn.contains(",")){
				String[] split = nameEn.split(",");
				for(int i=0; i<split.length; i++){
					if(split[i].equals(roleEn)){
						String name = dic.getName();
						roleList.add(name);
					}
				}
			}else {
				if(nameEn.equals(roleEn)){
					String name = dic.getName();
					roleList.add(name);
				}
			}
		}
		return roleList;
	}
	
	
}
